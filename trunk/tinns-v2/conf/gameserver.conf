// TinNS Gameserver configuration file
// IMPORTANT:
// If you want to run more than 1 Gameserver
// on the same machine, then you have to run
// the Gameservers with the conf file as arg
// Like:
// ./gameserver gameserver1.conf
// ./gameserver gameserver2.conf
// ..
// ..
// ==========================================

// MySQL settings
//================
// Hostname of the MySQL Database (under linux, you may use "localhost")
info_sql_host = 127.0.0.1
// Port (Default is 3306)
info_sql_port = 3306
// Username
info_sql_username = changeme
// Password
info_sql_password = changeme

// Databasename containing global serverlist and account data
info_sql_database = infoserver

// Hostname of the MySQL Database (under linux, you may use "localhost")
game_sql_host = 127.0.0.1
// Port (Default is 3306)
game_sql_port = 3306
// Username
game_sql_username = changeme
// Password
game_sql_password = changeme

// Databasename containing world data for THIS server
// Note: TinNS uses the global SQL database from MaxxJagg;
// Look at the Forum for a copy!
game_sql_database = gameserver

// ISC settings
// ================
// Method of data exchange
// 0: Disable data exchange. For stand-alone gameserver [Debug/internal setting]
// 1: MySQL; Same way as NeoPolis works, updates gameserver status every 10 seconds to sqlDB or everytime
//    something is changed (User logon/logoff)
//    Use this if you want to use an php script for server status on webpages
// 2: ISC; Uses ISC (Inter Server Communication) for data exchange. Every Gameserver will connect
//    to the infoserver over network. This is a special method from TinNS. Much more data about the
//    gameserver will be transfered, also you'll be able to control the infoserver from ingame if you are
//    serveradmin (Level 100)
// 3: MySQL & ISC. Uses ISC for data exchange AND updates the infoserver MySQL DB for webbased status scripts
//isc_method = 2
// DO NOT ENABLE ISC IN THIS VERSION!!!!
isc_method = 0

// Intervall when SQL is automaticly updated. Required for isc_method 1 & 3, ignored for isc_method 0 and 2
isc_update_intervall = 10

// IP of the infoserver to connect to (Required for isc_method 2 & 3)
isc_infoserverip = 127.0.0.1
// Port defined in infoserver.conf (Required for isc_method 2 & 3)
isc_infoserverport = 9991
// Passwort required to connect to infoserver (Required for isc_method 2 & 3)
isc_connect_pw = changeme

// Gameserver settings
//=====================
// Name of the GameServer
server_name = Irata

// IP Adress of the Gameserver when reached without NAT (what you care for on your local network)
server_ip = 127.0.0.1
// Network adress that is to be considered as non-NATed. Put 0 if no NAT is used at all
no_nat_net = 0
// IP Adress of the Gameserver when reached with NAT (e.g. for users connecting from Internet thought your firewall or router when you have multiple computers)
// no effect if no_nat_net is 0
server_nat_ip = 123.12.3.123

// TCP port the gameserver listens on.
// Default is 12000
gameserver_port = 12000

// UDP port range used. There should be enougth to permit [maxclients] simultaneous connections
gameserver_udpport_min = 5000
gameserver_udpport_max = 5099

// Patchlevel the Gameserver runs
server_version = 200

// max number of clients. default 128, min 1, max 2048
maxclients = 100

// how many slots are reserved for gamemasters. default 10
gm_slots = 10

// locations of def files
// Default is ./defs
defs_path = ./defs

// locations of world files
// Default is ./worlds
worlds_path = ./worlds
