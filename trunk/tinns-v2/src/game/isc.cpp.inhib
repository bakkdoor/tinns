/*
	TinNS (TinNS is not a Neocron Server)
	Copyright (C) 2005 Linux Addicted Community
	maintainer Akiko <akiko@gmx.org>

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
	02110-1301, USA.
*/

void PISC::Start()
{
    isc_method = Config->GetOptionInt("isc_method");
    if(isc_method == 2 || isc_method == 3)
    {
        Console->Print("ISC is enabled, update intervall: %d seconds, infoserver: %s");
        use_isc = true;
    }
    else if(isc_method == 1)
    {
        Console->Print("ISC is disabled, updating data over MySQL");
        use_isc = false;
        return;
    }
    else if(isc_method == 0)
    {
        Console->Print("ISC and MySQL is disabled, no data will be updated");
        use_isc = false;
        return;
    }

	u16 Port = Config->GetOptionInt("isc_infoserverport");
	if (Port == 0)
	{
		Console->Print("%s Unable to start ISC, isc_infoserverport setting is invalid");
		use_isc = false;
		return;
	}
	Console->Print("Trying to connect to infoserver...", Port);
	// Add function for initial connect here and store the connectioninfo somewhere
}

void PISC::Update()
{
    // Add function for ISC update here
}