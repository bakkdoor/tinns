<GPL>
	TinNS (TinNS is not a Neocron Server)
	Copyright (C) 2005 Linux Addicted Community
	maintainer Akiko <akiko@gmx.org>

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.

	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	GNU General Public License for more details.

	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
	02110-1301, USA.
</GPL>

Developers:
- Akiko
- bakkdoor
- Namikon

> Recent changes
====================
Namikon; 31.05.2006 22:12 GMT+1
----------
<General changes>
- Introduced CHANGELOG file
- Added version.h to enable a way to create release tarballs/binaries
- Fixed a dozen of typos and bugs from the additions of the last 2 days
- "Clean build"; Should compile without any error now. (Note: Not "work", "compile" :) )


<Source changes>
[GAME]
globals.cpp :: ShutdownTinNS()
  - Renamed to Shutdown()
  - Added svn version output to startup procedure
  - Fixed minor typos/console outputs
config.cpp :: LoadOptions()
  - Changed configfile, now loads data from /conf/gameserver.cfg
  - Added full 2 DB support (was: "sql_*" now: "info_sql_*" and "game_sql_*")

[INFO]

[PATCH]
globals.cpp :: ShutdownTinNS()
  - Renamed to Shutdown()

[ALL]
misc.cpp :: GetSVNRev()
  - Added handling for version.h defines
====================
Hammag; 06.07.2006 02:17 GMT+1
----------
<General changes>
- Put UDP sockets in non-blocking mode.
- Checked and modified all socket related stuff to work in non-blocking mode.
- Lowered CPU use from 100% to ~0% by changing from sched_yield() to I/O wait sleep using Select.
  This avoid runingthe main loop when there's nothing to do (some more improvements are to come
  on this topic).
- The socket Select now waits for any tcp OR UDP socket incoming data.
- Fixed some pointer issues in netcode.


<Source changes>
[GAME]
 
[INFO]
misc.h
 - added declaration of utility function IPlongToString()
misc.cpp :: IPlongToString()
 - implemented function to convert IP address in u32 format to string
infoserver.cpp :: HandleServerList()
 - now use IPlongToString() to display server IP on Console

[PATCH]

[ALL]
patchserver.cpp, infoserver.cpp, gameserver.cpp :: Start()
 - set 10 msec timeout for socket select, which sets the max wait time
  for the main loop when no activity.

main.cpp
 - commented out sched_yield() in main loop, as it is not needed anymore.

main.h
 - moved-up tinns-specific types include to ready them for netcode compilation

[NETCODE]
connection-tcp.cpp :: ConnectionTCP()
 - moved-in non-blocking setting from ServerSocket::getTCPConnection()
    for better class coherency
connection-tcp.cpp :: update()
 - modified to deal correctly with would-block socket writes.
 - fixed a pointer and size issue in socket recv

connection-udp.h :: class
 - added private member m_ServerSocket
 - added ServerSocket parameter in constructor prototype
 
connection-udp.cpp :: ConnectionUDP()
 - modified to set m_ServerSocket from constructor parameters
connection-udp.cpp :: ~ConnectionUDP()
 - added socket removal from fd sets by calling m_ServerSocket->delSocketFromSet
connection-udp.cpp :: update()
 - modified to check m_ServerSocket->isDataAvailable() before trying to read from socket
 - fixed a pointer and size issue in socket recv

serversocket.h :: class
 - added settimeout public method
 - added fd_set m_MainSetUDP private member
 - added fd_set m_MainSetGlobal private member (= m_MainSetTCP + m_MainSetUDP)
 
serversocket.cpp :: ServerSocket()
 - moved m_TimeOut initialization in constructor
 - added m_MainSetUDP and m_MainSetGlobal init
serversocket.cpp :: settimeout()
 - implemented method to set m_TimeOut to permit tuning
serversocket.cpp :: open()
 - added m_MainSetUDP and m_MainSetGlobal init
 - added m_ListenerTCP to m_MainSetGlobal too
serversocket.cpp :: update()
 - now m_MainSetGlobal is copied to m_ReadSetTCP set,
 - added a local fdMax for select
 - use a temp timeout structure in select as select doc says select implementation
    for Linux could change this value
serversocket.cpp :: getUDPConnection()
 - now pass this pointer to new ConnectionUDP constructor
 - new UDP sockets are added to m_MainSetUDP and m_MainSetGlobal,
    and kept track of in m_FdMaxUDP
serversocket.cpp :: getTCPConnection()
 - fixed a struct length issue (?) in accept
 - now new TCP sockets are added to m_MainSetGlobal too
 - moved non-blocking setting to ConnectionTCP::ConnectionTCP() for better class coherency
serversocket.cpp :: delSocketFromSet()
 - added removal of sockfd from m_MainSetUDP and m_MainSetGlobal too
 
====================
Hammag; 30.07.2006 02:17 GMT+1
----------
<General changes>
 - Baseline fixed, full zoning now really works with multiplayer
 - Multiuser now works. Multiple login + mutual viewing.
    Now a char displays as expected ingame for himself as for others.(some movement/positionning glitches remain)
 - Warning: code for using items hasn't been fixed, so every thing 2nd+ user does will be
     attriuted to 1st user and provoque OOO flood.
     So don't try using items, except for the first user.
 - added @skin command. Reminder use by @skin, little mode description in commands.cpp header

<Source changes>
[GAME]
 - Many changes in many files
 - amongst other, rewrited baseline.inc.cpp with new PMessage object as an exemple
 - added PItem & PInventory classes

[NETCODE]
 - Added PMessage class for network message input/output
 - UDP & TCP connection classes now has an interface for PMessages
 
====================
Hammag; 06.08.2006 02:17 GMT+1
----------
<General changes>
 - code for using items should now be fixed for most case (see above) so activating items in multiuser mode is no longer a limitation
 - a similar issue in @warp command has been solved (and spawn location added as an optional command line parameter as in NeoX)
 - further modifications to the netcode to cope with NAT. New options added to config file
 - rework of the config.cpp implementation, to enable easy addition of new option and more explicit error checking. See comments at begining of config.cpp
 - gametime flow fixed. Start time is set to 0 ATM
 - other minor changes. See source files starts for info
 - conf/gameserver.conf extended with NAT related options

<Source changes>
[GAME]
 - Many changes in many files for modifications stated above
 - Changes to ClientManager to make it work and add methods to dispatch messages to clients
 - game/Makefile updated
 
[NETCODE]
 - Changes in most files for modifications stated above

[INFO]
client.cpp :: GetAdress()
  - updated implementation to use ConnectionTCP::GetRemoteAddress()

[PATCH]
client.cpp :: GetAdress()
  - updated implementation to use ConnectionTCP::GetRemoteAddress()
  
====================
Hammag; 24.08.2006 02:17 GMT+1
----------
<General changes>
 - movement/positionning in multiuser is now fixed 
 - implemented NC messages decoding new base classes. Not used yet

<Source changes>
[GAME]
  - added PUdpMsgDecoder class, which objects manage UDP packets decoding
  - added PUdpMsgAnalyser class, which is the base class that real packet analyser objects will be derived from
      Analysis exemple is not yet implemented
  - added PUdpMsgUnknown class, which is the most simple exemple of final packet analyser object (used for unkown packets)

====================
Hammag; 26.08.2006 02:17 GMT+1
----------
<General changes>
 - A modified source tree is now used. The corresponding changes have been applied to the whole source code,
    resulting in some move to some common components directories, common includes and corresponding changes
    in servers source
 - A new Makefile system is now used. All makefiles have been remade accordingly.

<Source changes>
[ALL]
Put version.h in include dir
Created include/external.h
Removed corresponding includes from all main.h, and replaced by external.h

[CONSOLE]
Moved console *.cpp files in common/console
Moved console's *.h in include dir
Added a main.h in common/console for specific private includes
Made Console class generic, added output file as constructor parameter,
  changed servers code accordingly
Removed Console-> in Console->ColorText(...) in PConsole::~PConsole()

[NETCODE]
Moved netcode .cpp files in common/netcode
Moved netcode's *.h in include dir, changed netcode's main.h to netcode.h
Added a main.h in common/netcode for specific private includes

====================
Hammag; 27.08.2006 18:30 GMT+1
----------
<General changes>
 - Changed config class as a common component
 - Changed "misc" functions as a common components
 - Removed some old code, some old defines, and changed some defines to config entry

[CONFIG] 
Moved config .cpp file in common/config
Moved config *.h in include dir
Added a main.h in common/config for specific private includes
Made Config class generic, added option tempate and config file as LoadOptions parameter,
  changed servers code accordingly, by making use of the shared class
  and adding a templateconfig.h file included in the place where config loading is done

[MISC]
Merged all misc functions in a single misc.h and a single misc.cpp files
Moved config *.h in include dir
Move the misc.cpp in common/misc
Added a main.h in common/misc for specific private includes

[ALL SERVERS]
Modified global.cpp and main.h to use shared PConfig class and shared misc functions
Removed misc.* and config.* from servers sources

====================
Hammag; 10.09.2006 00:00 GMT+1
----------
<General changes>
 - Changed filesystem class as a common component
 - Added command @effect to play with skins effect (see commands.cpp for details)
 - Added command @speed to play with speed (see commands.cpp for details)
 - Removed some more #include directive from some main.h files to put them only
    when needed in .cpp file. This eliminated some unnecessary dependencies and
    makes recompile faster.
 - Migrated message decoding to new system for all messages types except 0x13/0x1f (yes... stil lots to do)
 

[ALL SERVERS]
Moved filesystem.h to include dir, and filesystem.cpp to common/filesystem dir
Removed filesystem.* from servers sources
Changed patchserver and gameserver accordingly


[GAME]
Added game/include dir to put all .h file to highly facilitate includes.
Added corresponding include directory path directive in game and game/* makefiles

Put all .def related stuff in game/def subdir.
*.h files are in game/include

Put all message decoding related stuff in game/decoder subdir.
msgdecoder.h file are in game/include.
Other .h files which are not exposed to other gameserver componenets are in game/decoder subdir.

Created a PMsgBuilder class to put message creating methods in it.
A global PMsgBuilder* MsgBuilder instance is added to gameserver.
Modified globals.*, gameserver.*, clientmanager.cpp, commands.cpp and various game/_inc accordingly

Moved PGameState definition from gameserver.cpp to gameserver.h

Added PChar* GetChar() method to PClient

Added WorldMap request basic support in PMsgBuilder::BuildReqInfoAnswerMsg() (for futur use)
Added BodyEffect and SpeedOverride members to PChar class, as well as methods to set and get these values
Added support for BodyEffect and SpeedOverride in PMsgBuilder::BuildCharHelloMsg()

Reorganised code related to UDP Sync in order to avoid duplicate code.
Put most of corresponding message building functions in PMsgBuilder class.

====================
Hammag; 22.09.2006 00:00 GMT+1
----------
<General changes>
 - Added Buddy list management (just the list though, buddy chat isn't working yet)
    Added a new gameserver DB table ti save the buddy list: buddy_list 
 - Added Direct chat management (just char selection though, direct chat isn't working yet, and selection isn't saved in DB yet)
 - Added Genrep list management. List is now working and saved. Registration of GR doesn't register the right GR though (working on that)
 - Added loading of worldmodel.def and appplace.def files for later (very soon) use.
 - Migrated most of message handling to new decoder system.
    Item use is migrated in "a compatibility mode" until item management is fully based on world .dat  and worldmodel.def files

[GAME]
Removed game/_inc directory
Removed all UDP message analysis and handling from gameserver.cpp
Created mode decoder classes in game/decoder
Moved most UDP packet creation code from gameserver.cpp to msgbuilder.cpp, using PMessages
Added PBuddyList class
Added PGenrepList class
Added loading/saving of Buddy List and Genrep List to char loading/saving in chars.cpp

Added new members to PChar to store skin color and brightness (aka "darkness")  in chars.h and char.cpp (not saved in DB yet)
  and corresponding support in PMsgBuilder::BuildCharHelloMsg()
Added new commands "@color" and "@brightness"

====================
Hammag; 27.09.2006 20:00 GMT+1
----------
<General changes>
 - Added loading of appartements.def and respawn.def files for later (very soon) use.
 - Corrected and modified dependencies management in make system.
    No unwanted file date change should occure anymore

[GAME]
Zoning to appartment now make use of appartements.def data instead of hardcoded data (zoning.cpp)
Added PMySQL::GetAptLocation() method in sql.cpp
Prepared some modification for WorldItems and Appartments in sql.cpp (these methodes will later be put in specific classes)

====================
Hammag; 28.09.2006 17:30 GMT+1
----------
<General changes>
 - Updated the gamserver DB install file to version 5 (database/GameDB5.zip) needed
    by the current TinNS version.
 - Added a SQL file to update existing gamserver DB from version 4 to version 5
    (database/GameDB4_to_GameDB5.sql)
 - Zoning is now fully based on NC files rather than hardcoded.
  
[GAME]
Filename in now taken from appartments.def (for app zoning) or from worlds.ini (general case)
Zoning out of appartment (Lift exit) is based on appplaces.def (was in the 27.09.2006 version already)
Corrected GR use. Now GR gets it true name, and this good name can be registred in the char GR list
 and seved in DB.
Changlog in command.cpp updated from last additions (22.09.2006)

====================
Hammag; 02.10.2006 23:30 GMT+1
----------
<General changes>
 - Started implementation of .dat worldfile parser
 - added a gameserver config option dev_debug to control development debug outputs
 
[GAME]
Added PWorldDatParser class, with files include/world_datparser.h and def/world_datparser.cpp
  (this classes might change/be replaced by a PWorldTemplate class very soon)

====================
Hammag; 03.10.2006 16:30 GMT+1
----------
<General changes>
 - Fix a big bug in gameserver causing server crash when using new character
    after its creation without server restart inbetween
 - added a gameserver config option auto_save_period to control character autosave period (in sec)
 
[GAME]
chars.cpp/.h :
  added PChar::CreateNewChar() and moved effective char creation from PChars to PChar
  added PChar::SQLDelete() (but not implemented yet)
  added use of auto_save_period config option in PChars::update()
  removed old XML-storage related code
accounts.cpp : 
  fixed an issue in PAccount::SetBannedStatus() that was causing the "can't update banned status" error message.
gameserver.cpp :
  added some more DB cleanup when a char is deleted. Still incomplete and will later be done in PChar::SQLDelete()
various .cpp files:
  put more log output under control of dev_debug config option

====================
Hammag; 04.10.2006 12:00 GMT+1
----------
<General changes>
 - Minor fixes to avoid some warnings
 - def directory removed from repository
 
====================
Hammag; 08.10.2006 01:25 GMT+1
----------
[rev. 20]

<General changes> 
 - fixed .pak archive deep file reading
 - implemented world furniture loading from world dat file (static furniture only atm)
 - implemented loading of worlds templates from .dat files (just for test now, will be used very soon)

WARNING: more NC files & dirs will be needed for the gameserver from now on:
./def/* (as already used by previous revisions)
./worlds.pak
./worlds/*
./terrain.pak
./terrain/*

with . being the gameserver's starting dir (a config option will be added soon to set this dir to something else if wanted)

[COMMON]
filesystem.cpp :
  Fixed package reading to enable access to "subdirectories" in archive,
    as well as translation from unix to dos path separator for in-archive search             
  Removed the "file not found" message the PFileSystem::Open() was issuing in the corresponding case.
    A NULL returned for PFile* is sufficient for the calling proc to manage the situation.
  Changed file search in archives to case-insensitive.
  
[GAME]
def_worlds.cpp :
  added quotes and spaces trim to mName and mDatFile.
def/gamedefs.cpp :
  minor changes in PGameDefs::LoadWorldFileDefs() to make it more silent
added furnituretemplate.cpp/.h (PFurnitureItemTemplate class)
added worlddatatemplate.cpp/.h (PWorldDataTemplate class)
added worlds.cpp/.h (PWorld and PWorlds classes)

====================
Hammag; 08.10.2006 01:25 GMT+1
----------
[rev. 21]

<General changes>
 - changed ingame debug management for a more generic @debug command:
    @debug 0|1  : disable|enable all debug outputs
    @debug loc[ation] 0|1 : disable|enable location output on move
    @debug it[emid] 0|1 : disable|enable item ID output on item use
   in the last two forms, omiting 0 or 1 just toggles the debug output
 - some additions on worlds data checking/loading

[GAME]
accounts.h :
  removed IsAdminDebug() and SetAdminDebug() methods
client.cpp/.h : 
  added GetDebugMode() and SetDebugMode() methods, along with mDebugMode[] private member.
commands.cpp :
  implemented new version of @debug command
decoder/udp_charmove.cpp :
  implemented ingame location debug output on move
decoder/udp_charmove.cpp :
  implemented ingame item use debug output

====================
Hammag; 11.10.2006 01:25 GMT+1
----------
[rev. 22]

<General changes>
 - added MySQL keepalive function to avoid connection loss on long server inactivity periods
 - fixed unreleased MYSQL_RES after all DB Res queries in infoserver leading to memory leak
 - reintroduced Namikon's ISC 

[Make]
Rules.make:
  fixed libs order in linker args to avoid lib not found on some systems
patch/Makefile :
  commented out some unused libs in linker args
info/Makefile :
  fixed libs order in linker args to avoid lib not found on some systems
  commented out some unused libs in linker args
game/Makefile :
  fixed libs order in linker args to avoid lib not found on some systems
  commented out some unused libs in linker args

[GAME]
configtemplate.h, gameserver.conf :
  added 'mysql_wait_timeout' config option, to be set to value of the
    wait_timout system variable from the MySQL server (default 28800 sec).
    It triggers the MySQL keepalive for both gameDB and infoDB connections.
    Value 0 disables this keepalive function.
sql.cpp/.h :
  added Update() method, which now include MySQL keepalive management and CheckResCount()
  added mKeepaliveDelay and mLastKeepaliveSent members
main.cpp :
  updated main loop to call MySQL->Update() instead of MySQL->CheckResCount()
global.cpp :
  added Hammag to the coders list
isc.cpp/.h : reintroduced Namikon's ISC for implementation of serverlist update
  through MySQL in the coming days.
  
[INFO]
configtemplate.h, infoserver.conf :
  added 'mysql_wait_timeout' config option (see [GAME])
sql.cpp/.h :
  added Update() method, which now include MySQL keepalive management
  added mKeepaliveDelay and mLastKeepaliveSent members
  added FreeSQLResult() method to perform mysql_free_result()
main.cpp :
  added call to MySQL->Update() in the main loop
accounts.cpp, infoserver.cpp :
  added call to FreeSQLResult() where required
global.cpp :
  added Hammag to the coders list

====================
Hammag; 13.10.2006 20:00 GMT+1
----------
[rev. 23]

<General changes>
 - activated modified ISC component. Server list and user count displayed by the infoserver
   are now updated by the gameserver using the "MySQL" method (same as Neopolis X)
 - added 'nc_data_path' option to gameserver.conf. It must be set to the root path of the nc data,
    either the NC1 directory or a copy.  ./ means reative to gameserver start dir
 - 'defs_path' and 'worlds_path' are not used anymore in gameserver.conf
 
[GAME]
isc.cpp/isc.h :
  implemented MySQL mode
  some other generic addition to the PISC class
configtemplate.h :
  set 'isc_method' default to 1 (i.e. MySQL mode only)
  set 'isc_update_intervall' default to 60 sec
def/main.h :  
  values of DEF_* defines for def filenames now include patgh relative to nc_data_path
gamedefs.cpp :
  modified to take into account main.h modifs and nc_data_path

[INFO]
infoserver.cpp :
  modified PInfoSrver::GSLiveCheck() to be independant of gameserver time.
    No time sync is needed between servers anymore.

[COMMON]
filesystem.cpp :
  fixed a bug when handling some files .pak archives with path starting with ./

====================
Hammag; 24.10.2006 17:00 GMT+1
----------
[rev. 24]
<General changes>
Internal changes only

====================
Hammag; 26.10.2006 02:15 GMT+1
----------
[rev. 25]

<General changes>
 - finished world data on-demand loading
 - fixed an issue in world "furniture" data loading
 
[GAME]
added a Worlds global object (class PWorlds)
modified PChar and PClient classes to Lease/Release world when char changes location,
  which shall now be done using the new PClient::ChangeCharLocation method
modified decoder/udp_zoning accordingly
modified def/world_datstruct.h and def/world_datparser.cpp to fix world data loading

====================
Hammag; 08.11.2006 22:00 GMT+1
----------
[rev. 26]

<General changes>
 - added isc_server_id in gameserver.conf, to be set to s_id value from infoserver DB.
    server status should then be kept up to date in the server selection window of NC client
 - fixed a bug leading to char location being reset to bad zone when login in under some circumstances
 - sitting on chairs now works again and is seen by others chars. Some more thing are to be added to this though.
 - all dungeon/sewers/UG entries should work. But spawning place are not always right, as it seems that info in
    appplaces.def is not allways the right one (about the "entity")
 - all doors should open and be seen opening by other chars. Locked doors will open like any others
    as I haven't found the link bewteen button and door
 - other internal changes

====================
Hammag; 21.11.2006 02:00 GMT+1
----------
[rev. 27]

<General changes>
 - fixed teleport-to-nowhere-when-leaving-chair issue
 - implemented free chair check
 - implemented nice position when leaving chair (orientation still not fixed ...)
 => problem of char disapearing for others when sitting for some time still not fixed*
 - added "new_char_location" option in gameserver.conf, with default to mc5 starting zone
 - added starting apartment creation

====================
Hammag; 25.11.2006 16:45 GMT+1
----------
[rev. 28]

<General changes>
 - fixed a bug when zoning to holomatch zones
 - fixed Holomatch exit (but still same problem for spawning entity as in some dungeon zoning)
 - fixed UG exit (but still same problem for spawning entity as in some dungeon zoning)
 - fixed appartement lift use
 - fixed char-vanish-for-others-when-sitting-too-long issue
    (but already sitting char still invisible for loggin-in chars)
 - fixed a bug in starting apartment creation 
 - increased TCP timeout which caused connection loss when taking too much time creating a char
 - subskill increasing now works (freely, ie. without any check against class or available skill points)
 
====================
Hammag; 26.11.2006 02:00 GMT+1
----------
[rev. 29]

<General changes>
 - triggered doors now work as expected (hopefully... the trigger button is the one
    closest to the door). Hack button an money button just work like standard buttons for the moment.

====================
Namikon; 09.12.2006 01:20 GMT+1
----------
[rev. 30]

[GAME]
 - (Hopefully) Fixed Autoaccount problem with Gameserver (Rehashing accountdata now every 30 seconds. However,
   this isnt verified.)
 - New command: @rehash. Does the same as the server every 30 seconds, for those who cant wait :P
 
====================
Namikon; 09.12.2006 01:32 GMT+1
----------
[rev. 31]
- Forget to update the Changelog, ^_^

====================
Hammag; 09.12.2006 16:40 GMT+1
----------
[rev. 32]
This revision is mostly a commit of intermediate change to avoid future conflicts, with no new functionnalty added

<General changes>
 - added regexsupport for futur use in user strings control (username, password, charname, etc)

[GAME]
main.cpp: changed type used for time in DB rehash from u32 (causing complile warning) to std::time_t which
          is the time type (for seconds) now used in gameserver.
          
[COMMON]
regex : added the RegEx class (Simple C++ wrapper for PCRE) to the tinns lib :
        common/regex/regex++.cpp
        include/regex++.h

====================
Namikon; 10.12.2006 11:35 GMT+1
----------
[rev. 33]
- Added @uptime to view server's uptime ingame

<General changes>

[GAME]
gameserver.h: Added "std::time_t mServerStartupTime" and public inline "GetStartTime()" to receive Server's
	      startup timestamp anywhere in the source
gameserver.cpp: Added mServerStartupTime to gameserver's class constructor (Var gets set one time uppon startup)
commands.cpp: Added @uptime. Generates readeable output in the form (Years, Months, Weeks, Days, ...) from the
              difference between mServerStartUp and the current timestamp

====================
Namikon; 10.12.2006 15:30 GMT+1
----------
[rev. 35]
- Added @broadcast. GM and higher can now send out "ADMIN> Server: <text>" broadcasts
- Worked on Chat subsystem. Current status:
> Buddy		- Sends text to Buddy, everyone in the same Zone can read. No Buddylist yet
> Local		- Another problem, local is TCP on retail, we use UDP. Works for now, needs further research
> Clan		- Same as Buddy
> Team		- Same as Buddy
> Direct	- No function yet
> GM		- Done. (100%)
> Admin		- Done. (100%)
> All others	- Nearly done. Sends/Receives to/from correct channel, including zone/fraction/etc
		  limitation. However, you cant disable channels yet, needs further research.

- 2 new options in gameserver.cfg: 
> broadcast_new			- If set to 1, the server will send out an broadcast to channel OOC with
				  a welcome message. Default is 0.
> broadcast_new_hidestaff	- If set to 1, all "non-players" are not announced over OOC. Default is 0.
- Fixed some typos in chat.h/.cpp

[GAME]
chat.h/.cpp	: Corrected some typos.
		  Added sendBroadcast (Admin channel)
		  Added sendOOCBroadcast (OOC channel)
		  Added all missing sendXXX functions
		  Removed several Console outputs. We know it works, no need to debug it anymore.
gameserver.cpp	: Changed current welcome message to new OOC broadcast method
configtemplate.h: Added 2 new default values for broadcast on connect
commands.cpp	: Added @broadcast command. First command which checks your accesslevel. (as announced before)
====================
Namikon; 10.12.2006 15:30 GMT+1
----------
[rev. 36+37]
- Worked again on Chat subsystem. Current status:
> Buddy		- Done. (100%)


[GAME]
buddylist.cpp / .h : Added function "IsInBuddy()" to perform a simple check "Is a buddy? y/n"
chars.h		   : Added inline to pass IsBuddy to buddylist->IsInBuddy()
chat.cpp	   : Fixed sendBuddy function. Working as it should now

====================
Namikon; 10.12.2006 23:20 GMT+1
----------
[rev. 38]
- Worked again on Chat subsystem. Current status:
> Direct		- Done. (100%)


[GAME]
chat.cpp/.h	   : Added new function sendPlayerDirect, altered main-chatloop, order is now Local, Direct, others
